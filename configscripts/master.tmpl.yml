#cloud-config

---
hostname: "hostname"


write_files:
  - path: /etc/systemd/network/static.network
    permissions: '0644'
    owner: root
    content: |+
      #[Match]
      #Name=ens34
      #[Network]
      #Address=192.168.14.41/24
      #Gateway=192.168.14.1
      #netmask 255.255.255.0
      #DNS=8.8.8.8
      #DNS=8.8.4.4

  - path: /etc/environment
    permissions: '0644'
    content: |+
      #COREOS_PUBLIC_IPV4=xxxx
      #COREOS_PRIVATE_IPV4=xxx

  - path: /etc/profile.d/etcd-envvars.sh
    permissions: '0644'
    owner: root
    content: |
      #export ETCDCTL_PEERS="http://192.168.14.41:2379"
      #export FLEETCTL_ENDPOINT="http://192.168.14.41:2379"
      #export DEFAULT_IPV4=192.168.14.41

  - path: /opt/bin/waiter.sh
    owner: root
    content: |
      #! /usr/bin/bash
      until curl http://127.0.0.1:2379/v2/machines; do sleep 2; done

  - path: /etc/resolv.conf
    permissions: '0644'
    owner: root
    content: |
      nameserver 8.8.8.8

  - path: /etc/ntp.conf
    content: |
      # Common pool
      server 0.pool.ntp.org
      server 1.pool.ntp.org
      # - Allow only time queries, at a limited rate.
      # - Allow all local queries (IPv4, IPv6)
      restrict default nomodify nopeer noquery limited kod
      restrict 127.0.0.1
      restrict [::1]

  - path: /etc/ssh/sshd_config
    permissions: '0600'
    owner: root:root
    content: |
      # Use most defaults for sshd configuration.
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      PermitRootLogin no
      AllowUsers core
      PasswordAuthentication no
      ChallengeResponseAuthentication no

  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
        sleep 1;
      exit $?

coreos:
  update:
    group: alpha
    reboot-strategy: "reboot"
    server: https://active8.update.core-os.net/v1/update/

  fleet:
    etcd-servers: http://localhost:2379
    metadata: "role=master"

  flannel:
    interface: ens34

  etcd2:
    discovery: <discovery-token>
    advertise-client-urls: http://<public-ip>:2379
    initial-advertise-peer-urls: http://<master-private-ip>:2380
    listen-client-urls: http://0.0.0.0:2379, http://0.0.0.0:4001
    listen-peer-urls: http://<master-private-ip>:2380, http://<master-private-ip>:7001

  units:
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        [Service]
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
          -e STANDALONE=false \
          -e GUNICORN_OPTS=[--preload] \
          -e MIRROR_SOURCE=https://registry-1.docker.io \
          -e MIRROR_SOURCE_INDEX=https://index.docker.io \
          -e MIRROR_TAGS_CACHE_TTL=1800 \
          quay.io/devops/docker-registry:latest
    - name: fleet.service
      command: start
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd2.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that docker-cache is up and that flanneld finished
            # startup, otherwise containers won't land in flannel's network...
            Requires=docker-cache.service flanneld.service
            After=docker-cache.service flanneld.service
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://<master-private-ip>:5000'

    - name: settimezone.service
      command: start
      content: |
        [Unit]
        Description=Set the timezone
        [Service]
        ExecStart=/usr/bin/timedatectl set-timezone Europe/Amsterdam
        RemainAfterExit=yes
        Type=oneshot

    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        After=etcd2.service docker-cache.service fleet.service docker.service flanneld.service
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.15.0/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.15.0/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubectl
        ExecStartPre=/opt/bin/wupiao <master-private-ip>:2379/v2/machines
        ExecStart=/opt/bin/kube-apiserver \
          --allow_privileged=true \
          --insecure_bind_address=0.0.0.0 \
          --insecure_port=8080 \
          --kubelet_https=true \
          --secure_port=6443 \
          --portal_net=10.100.0.0/16 \
          --etcd_servers=http://127.0.0.1:2379 \
          --public_address_override=<master-private-ip> \
          --cloud_provider=<cloud-provider> \
          --logtostderr=true \
          --runtime_config=api/v1beta3
        Restart=always
        RestartSec=10

    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.15.0/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStartPre=/opt/bin/wupiao <master-private-ip>:8080
        ExecStart=/opt/bin/kube-controller-manager \
          --master=<master-private-ip>:8080 \
          --cloud_provider=<cloud-provider> \
          --pod_eviction_timeout=30s \
          --node_milli_cpu=<node-cpus>000 \
          --node_memory=<node-memory>Mi \
          --logtostderr=true
        Restart=always
        RestartSec=10

    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.15.0/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStartPre=/opt/bin/wupiao <master-private-ip>:8080
        ExecStart=/opt/bin/kube-scheduler \
        --master=<master-private-ip>:8080
        Restart=always
        RestartSec=10

    - name: kube-register.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Registration Service
        Documentation=https://github.com/kelseyhightower/kube-register
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -O /opt/bin/kube-register https://github.com/kelseyhightower/kube-register/releases/download/v0.0.2/kube-register-0.0.2-linux-amd64
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register
        ExecStartPre=/opt/bin/wupiao <master-private-ip>:8080
        ExecStart=/opt/bin/kube-register \
        --metadata=role=node \
        --fleet-endpoint=unix:///var/run/fleet.sock \
        --api-endpoint=<master-private-ip>:8080 \
        --healthz-port=10248
        Restart=always
        RestartSec=10